import speech_recognition as sr
import os
import random
import playsound
import colorama
from gtts import gTTS
from gtts.tts import gTTSError

AUDIO_FOLDER = "./text-to-speech-audio"


class SpeechAssistant:
    def __init__(self, masters_name, assistants_name):
        self.master_name = masters_name
        self.assistant_name = assistants_name

    def listen_to_audio(self, ask=None):
        with sr.Microphone() as source:
            voice_text = ""
            try:
                r = sr.Recognizer()
                # let's override the dynamic threshold to 400,
                # so the timeout we set in listen() will be used
                r.dynamic_energy_threshold = False
                r.energy_threshold = 400

                # calibrate (source) microphone
                r.adjust_for_ambient_noise(source)

                if ask:
                    # announce/play something before listening to user
                    self.speak(ask)

                # listening
                audio = r.listen(source, timeout=5)
                # convert to text/string data
                voice_text = r.recognize_google(audio)

            except sr.UnknownValueError:
                return voice_text.strip()
            except sr.RequestError:
                self.speak(
                    "Sorry! My speech service is not available at the moment.")
            except gTTSError as gts_err:
                print(gts_err.infer_msg())
            except Exception as ex:
                # bypass the timed out exception, (timedout=5, if total silence for 5 secs.)
                if not "listening timed out" in str(ex):
                    print(ex.__cause__)

            if voice_text.strip():
                print(f"\033[1;40;42m{self.master_name}: {voice_text}")
            return voice_text.strip()

    def speak(self, audio_string):
        if audio_string.strip():
            # init google's text-to-speech module
            tts = gTTS(text=audio_string, lang="en-us", slow=False)

            if not os.path.isdir(AUDIO_FOLDER):
                os.mkdir(AUDIO_FOLDER)

            # generate a filename for the audio file generated by google
            audio_file = f"{AUDIO_FOLDER}/assistants-audio-{str(random.randint(1, 1000))}.mp3"
            tts.save(audio_file)

            # announce/play the generated audio
            print(f"\033[1;40;46m{self.assistant_name}: {audio_string}")
            playsound.playsound(audio_file)

            # delete the audio file after announcing to save mem space
            os.remove(audio_file)
